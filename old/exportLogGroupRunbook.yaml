description: export log group to S3
schemaVersion: '0.3'
assumeRole: '{{AutomationAssumeRole}}'
parameters:
  AutomationAssumeRole:
    type: String
    description: '(Optional) The Amazon Resource Name (ARN) of the IAM role that allows Automation to perform the actions on your behalf. If no role is specified, Systems Manager Automation uses your IAM permissions to operate this runbook.'
    default: ''
  logGroupName:
    type: String
    description: (Required)The name of the log group.
  destination:
    type: String
    description: (Required) The name of S3 bucket for the exported log data.
  destinationPrefix:
    type: String
    description: (Optional) The prefix used as the start of the key for every object exported.
    default: ''
  MonthSet:
    type: Integer
    description: '(Optional) Export month set, default = 1(this month)'
    default: 1
  SleepMin:
    type: String
    default: |
      5
    description: (Optional) Sleep if use multiple export tasks
mainSteps:
  - name: startSleep
    action: 'aws:sleep'
    inputs:
      Duration: 'PT{{SleepMin}}M'
    description: sleep for execute
  - name: waitExportTasks
    action: 'aws:waitForAwsResourceProperty'
    timeoutSeconds: 7200
    inputs:
      Service: logs
      Api: DescribeExportTasks
      PropertySelector: '$.exportTasks[0].status.code'
      DesiredValues:
        - COMPLETED
        - CANCELLED
        - FAILED
    nextStep: exportCloudwatchLogGroup
  - name: exportCloudwatchLogGroup
    action: 'aws:executeScript'
    timeoutSeconds: 600
    inputs:
      Runtime: python3.6
      Handler: script_handler
      Script: |-
        import boto3
        import botocore
        import sys
        from botocore.config import Config
        import datetime
        import os, time
        from dateutil import relativedelta

        region = os.environ['AWS_REGION']

        config = Config(
          retries = {
              'max_attempts': 5,
              'mode': 'standard'
          }
        )
        client=boto3.client("logs", region_name=region, config=config)
        def script_handler(events, context):
          paramLogGroupName = events.get('logGroupName')
          paramDestination = events.get('destination')
          paramMonthSet = events.get('monthSet')
          paramDestinationPrefix = events.get('destinationPrefix')
          
          nowTime = datetime.datetime.utcnow()

          thisMonth = datetime.datetime(year=nowTime.year, month=nowTime.month + paramMonthSet, day=1, hour=0, minute=0, second=0)
          prevMonth = thisMonth - relativedelta.relativedelta(months=1)
          first_day = prevMonth - datetime.timedelta(hours=2)
          last_day = thisMonth - datetime.timedelta(seconds=1) - datetime.timedelta(hours=2)
          paramDestinationPrefix = paramDestinationPrefix+paramLogGroupName.split('/', maxsplit=1)[0]+'/'+str(last_day.year)+'/'+str(last_day.month).zfill(2)+'/'+paramLogGroupName.split('/', maxsplit=1)[1].replace('/', '-')

          tries = 120
          
          for i in range(tries): 
            try:
              result=client.create_export_task(
                logGroupName=paramLogGroupName,
                fromTime=int(time.mktime(first_day.timetuple())*1000),
                to=int(time.mktime(last_day.timetuple())*1000),
                destination=paramDestination,
                destinationPrefix=paramDestinationPrefix
              )
            except client.exceptions.LimitExceededException:
              if i < tries - 1: 
                time.sleep(60)
                continue
              else: 
                print('Error: Need to wait until all tasks are finished (LimitExceededException).')
                sys.exit(1)
            except Exception as e:
              print('Error: Request to AWS CLI failed {}'.format(e))
              sys.exit(1)
            break

          print('Export task starting, ID: '+ result.get('taskId'))
          return {
            'exportTaskID' : result.get('taskId'),
            'destinationPrefix' : paramDestinationPrefix
          }
      InputPayload:
        logGroupName: '{{logGroupName}}'
        destination: '{{destination}}'
        destinationPrefix: '{{destinationPrefix}}'
        monthSet: '{{MonthSet}}'
    description: export log group to S3
    outputs:
      - Name: Payload
        Selector: $.Payload
        Type: StringMap
      - Name: exportTaskID
        Selector: $.Payload.exportTaskID
        Type: String
      - Name: destinationPrefix
        Selector: $.Payload.destinationPrefix
        Type: String
    nextStep: describeCloudWatchExport
  - name: describeCloudWatchExport
    action: 'aws:waitForAwsResourceProperty'
    timeoutSeconds: 7200
    inputs:
      Service: logs
      Api: DescribeExportTasks
      taskId: '{{ exportCloudwatchLogGroup.exportTaskID }}'
      PropertySelector: '$.exportTasks[0].status.code'
      DesiredValues:
        - COMPLETED
    isEnd: true